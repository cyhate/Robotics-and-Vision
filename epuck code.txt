def run_robot(robot):
    # get the time step of the current world.
    timestep = int(robot.getBasicTimeStep())
    max_speed = 6.28
    max_time = 120 # 2 minutes in seconds

    #  Enable motors
    left_motor = robot.getDevice('left wheel motor')
    right_motor = robot.getDevice('right wheel motor')

    left_motor.setPosition(float('inf'))
    left_motor.setVelocity(0.0)

    right_motor.setPosition(float('inf'))
    right_motor.setVelocity(0.0)

    #enable proximity sensor
    prox_sensors = []
    for ind in range(8):
        sensor_name = 'ps' + str(ind)
        prox_sensors.append(robot.getDistanceSensor(sensor_name))
        prox_sensors[ind].enable(timestep)

    # Initialize variables
    elapsed_time = 0
    is_time_up = False

    # Main loop:
    # - perform simulation steps until Webots is stopping the controller
    while robot.step(timestep) != -1 and not is_time_up:
        # Read the sensors:
        for ind in range(8):
            print('ind: {}, val: {}'.format(ind,prox_sensors[ind].getValue()))

        # Process sensor data here.
        left_wall = prox_sensors[5].getValue() > 80
        left_corner = prox_sensors[6].getValue() > 80
        front_wall = prox_sensors[7].getValue() > 80

        left_speed = max_speed
        right_speed = max_speed

        if front_wall: 
            print("Turn right in place")
            left_speed = max_speed
            right_speed = -max_speed
        else:
            if left_wall:
                print("drive forward")
                left_speed = max_speed
                right_speed = max_speed
            else:
                print("Turn left")
                left_speed = max_speed/8
                right_speed = max_speed
            if left_corner:
                print("too close drive right")
                left_speed = max_speed
                right_speed = max_speed/8

        # Enter here functions to send actuator commands, like:
        #  motor.setPosition(10.0)
        left_motor.setVelocity(left_speed)
        right_motor.setVelocity(right_speed)

        # Update elapsed time
        elapsed_time += timestep/1000.0
        if elapsed_time >= max_time:
            is_time_up = True

    # Enter here exit cleanup code.
    if is_time_up:
        from second_code import run_robot as second_code
        second_code(robot)

if __name__=="__main__":
    # create the Robot instance.
    my_robot = Robot()
    run_robot(my_robot)
